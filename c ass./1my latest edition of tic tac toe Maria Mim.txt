
/*“acknowledge,” Maria Mim (2101022).
She helped us with the primary source code which we then edited;
1. added a new function, 'void disp_matrix_with_coordinates(void);'
2. added a draw-match test
2. added matrix-display also if he second player wins.*/

#include <stdio.h>
#include <stdlib.h>

char matrix[3][3];  /* the tic tac toe matrix */

char check(void);
void init_matrix(void);
void get_player1_move(void);
void get_player2_move(void);
void disp_matrix(void);
void disp_matrix_with_coordinates(void);

int main(void)
{

    printf("acknowledge, Maria Mim (2101022).\nShe helped us with the primary source code which we then edited;\n1. added a new function, 'void disp_matrix_with_coordinates(void);'\n2. added a draw-match test\n3. added matrix-display also if the second player wins.\n\n\n");
  char checked_room;

  printf("!!!!!!!!!!!!!!!!!This is a game of Tic Tac Toe.!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\nMatrix coordinates:\n\n");
  disp_matrix_with_coordinates();
  printf("Sign for player 1 is '1'\nSign for player 2 is '0'\n\n");

  checked_room =  ' ';
  init_matrix();
 disp_matrix();
  do {

    get_player1_move();
    disp_matrix();
    checked_room = check(); /* see if winner */
    if(checked_room!= ' ') break; /* winner!*/

    get_player2_move();
 disp_matrix();
    checked_room = check(); /* see if winner */
  } while(checked_room== ' ');

  if(checked_room=='0') printf("Player 2 has won the match!\n");
  else printf("Player 1 has won the match!!!!\n");

  return 0;
}

/* Initialize the matrix. */
void init_matrix(void)
{
  int i, j;

  for(i=0; i<3; i++)
    for(j=0; j<3; j++) matrix[i][j] =  ' ';
}

/* Get first player's move. */
void get_player1_move(void)
{
  int x, y;

  printf("Player 1 enter X,Y coordinates for your move: ");
  scanf("%d %d", &x, &y);

  x--; y--;

  if(matrix[x][y]!= ' '){
    printf("Invalid move, try again.\n");
    get_player1_move();
  }
  else matrix[x][y] = '1';
}

/* Get second player's move. */
void get_player2_move(void)
{
  int x, y;

  printf("Player 2 enter X,Y coordinates for your move: ");
  scanf("%d %d", &x, &y);

  x--; y--;

  if(matrix[x][y]!= ' '){
    printf("Invalid move, try again.\n");
    get_player2_move();
  }
  else matrix[x][y] = '0';
}
/*Display the matrix on the screen with the coordinates*/
void disp_matrix_with_coordinates(void)
{
  int i,j;

  for(i=0,j=0; i<3; i++)
  {printf(" %d %d | %d %d | %d %d ",i+1,j+1,i+1,j+2,i+1,j+3);
    if(i!=2) printf("\n_____|_____|_____\n");
    else if(i=2) printf("\n     |     |     \n");
  }
  printf("\n");
}

/* Display the matrix on the screen. */
void disp_matrix(void)
{
  int t;

  for(t=0; t<3; t++) {
    printf(" %c | %c | %c ",matrix[t][0],
            matrix[t][1], matrix [t][2]);
    if(t!=2) printf("\n---|---|---\n");
  }
  printf("\n");
}

/* See if there is a winner or draw */
char check(void)
{
  int i;

  for(i=0; i<3; i++)  /* check rows */
    if(matrix[i][0]==matrix[i][1] &&
       matrix[i][0]==matrix[i][2]) return matrix[i][0];

  for(i=0; i<3; i++)  /* check columns */
    if(matrix[0][i]==matrix[1][i] &&
       matrix[0][i]==matrix[2][i]) return matrix[0][i];

  /* test diagonals */
  if(matrix[0][0]==matrix[1][1] &&
     matrix[1][1]==matrix[2][2])
       return matrix[0][0];

  if(matrix[0][2]==matrix[1][1] &&
     matrix[1][1]==matrix[2][0])
       return matrix[0][2];
/*test draw*/
 if(matrix[0][0]!=' ' && matrix[0][1]!=' ' && matrix[0][2]!=' '&& matrix[1][0]!=' ' && matrix[1][1]!=' ' && matrix[1][2]!=' ' && matrix[2][0]!=' ' && matrix[2][1]!=' ' && matrix[2][2]!=' ') {printf("!Match Draw!\n"); exit(0);}
  return ' ';
}


